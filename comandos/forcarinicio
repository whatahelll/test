module.exports = {
    name: 'forcarinicio',
    description: 'For√ßa o in√≠cio da partida (apenas administradores)',
    execute: async (message, args, client) => {
        console.log('Comando forcarinicio executado por:', message.author.tag);
        
        if (!message.member) {
            console.log('N√£o √© em servidor');
            return message.reply('‚ùå Este comando s√≥ pode ser usado em servidores!');
        }

        if (!message.member.permissions.has('Administrator')) {
            console.log('Usu√°rio sem permiss√£o de admin:', message.author.tag);
            return message.reply('‚ùå Apenas administradores podem usar este comando!');
        }

        console.log('Usu√°rio √© admin, prosseguindo...');

        const fs = require('fs');
        
        let matches = {};
        try {
            matches = JSON.parse(fs.readFileSync('./dados/partidas.json', 'utf8'));
            console.log('Matches carregados:', Object.keys(matches));
        } catch (error) {
            console.log('Erro ao carregar matches:', error);
            matches = {};
        }

        let teams = {};
        try {
            teams = JSON.parse(fs.readFileSync('./dados/times.json', 'utf8'));
            console.log('Teams carregados:', Object.keys(teams));
        } catch (error) {
            console.log('Erro ao carregar teams:', error);
            teams = {};
        }

        console.log('Procurando partida no canal:', message.channel.id);

        const match = Object.values(matches).find(m => {
            console.log('Verificando match:', {
                id: m.id,
                generalChannel: m.channels?.general,
                status: m.status,
                match: m.channels?.general === message.channel.id && m.status === 'aguardando_jogadores'
            });
            return m.channels && m.channels.general === message.channel.id && m.status === 'aguardando_jogadores';
        });

        if (!match) {
            console.log('Nenhuma partida encontrada');
            return message.reply('‚ùå Nenhuma partida aguardando jogadores encontrada neste canal!');
        }

        console.log('Partida encontrada:', match.id);

        const team1 = teams[match.team1];
        const team2 = teams[match.team2];

        if (!team1 || !team2) {
            console.log('Times n√£o encontrados');
            return message.reply('‚ùå Erro: Times da partida n√£o encontrados!');
        }

        console.log('Times encontrados:', team1.name, 'vs', team2.name);

        const lobbyChannel = client.channels.cache.get('1367543346469404756');
        if (!lobbyChannel) {
            console.log('Canal de lobby n√£o encontrado');
            return message.reply('‚ùå Canal de lobby n√£o encontrado!');
        }

        const voiceChannel1 = client.channels.cache.get(match.channels.voice1);
        const voiceChannel2 = client.channels.cache.get(match.channels.voice2);

        if (!voiceChannel1 || !voiceChannel2) {
            console.log('Canais de voz n√£o encontrados');
            return message.reply('‚ùå Canais de voz da partida n√£o encontrados!');
        }

        const membersInLobby = lobbyChannel.members;
        const team1Members = membersInLobby.filter(member => member.roles.cache.has(team1.roleId));
        const team2Members = membersInLobby.filter(member => member.roles.cache.has(team2.roleId));

        console.log('Jogadores encontrados:', {
            team1: team1Members.size,
            team2: team2Members.size
        });

        if (team1Members.size === 0 && team2Members.size === 0) {
            return message.reply('‚ùå N√£o h√° nenhum jogador de ambos os times no canal de lobby!');
        }

        if (team1Members.size === 0) {
            return message.reply(`‚ùå N√£o h√° jogadores do time **${team1.name}** ${team1.icon} no canal de lobby!`);
        }

        if (team2Members.size === 0) {
            return message.reply(`‚ùå N√£o h√° jogadores do time **${team2.name}** ${team2.icon} no canal de lobby!`);
        }

        const team1Players = Array.from(team1Members.values());
        const team2Players = Array.from(team2Members.values());

        let team1Moved = 0;
        let team2Moved = 0;

        console.log('Movendo jogadores...');

        for (const member of team1Players) {
            try {
                await member.voice.setChannel(voiceChannel1);
                team1Moved++;
                console.log(`Movido: ${member.user.username} para team1`);
            } catch (error) {
                console.log(`Erro ao mover ${member.user.username}:`, error.message);
            }
        }

        for (const member of team2Players) {
            try {
                await member.voice.setChannel(voiceChannel2);
                team2Moved++;
                console.log(`Movido: ${member.user.username} para team2`);
            } catch (error) {
                console.log(`Erro ao mover ${member.user.username}:`, error.message);
            }
        }

        match.status = 'em_andamento';
        match.players = {
            team1: team1Players.map(m => m.id),
            team2: team2Players.map(m => m.id)
        };

        if (match.startVote) {
            delete match.startVote;
        }

        matches[match.id] = match;

        try {
            fs.writeFileSync('./dados/partidas.json', JSON.stringify(matches, null, 2));
            console.log('Dados salvos');
        } catch (error) {
            console.error('Erro ao salvar:', error);
        }

        const responseMessage = `üî• **PARTIDA INICIADA FOR√áADAMENTE POR ADMIN!** üî•\n\n${team1Moved} jogadores do **${team1.name}** ${team1.icon} vs ${team2Moved} jogadores do **${team2.name}** ${team2.icon} foram movidos para seus canais!\n\n‚ö†Ô∏è **Aviso:** Este in√≠cio foi for√ßado por ${message.author}, ignorando o m√≠nimo de 4 jogadores por time.`;
        
        console.log('Enviando resposta');
        message.reply(responseMessage);
    }
};